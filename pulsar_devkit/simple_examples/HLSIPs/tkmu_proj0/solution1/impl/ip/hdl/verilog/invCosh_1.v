// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module invCosh_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv49_1555556 = 49'b1010101010101010101010110;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv25_800000 = 25'b100000000000000000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv11_400 = 11'b10000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] data_V_read;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire   [12:0] cosh_table7_address0;
reg    cosh_table7_ce0;
wire   [10:0] cosh_table7_q0;
reg   [14:0] tmp_232_reg_152;
wire   [0:0] icmp_fu_126_p2;
reg   [0:0] icmp_reg_157;
reg   [0:0] ap_pipeline_reg_pp0_iter5_icmp_reg_157;
wire   [63:0] tmp_196_fu_135_p1;
wire   [10:0] tmp_fu_64_p1;
wire   [23:0] r_V_tr_fu_68_p3;
wire   [25:0] grp_fu_80_p0;
wire   [23:0] grp_fu_80_p1;
wire   [48:0] grp_fu_80_p2;
wire   [22:0] tmp_231_fu_86_p4;
wire   [24:0] tmp_cast_cast_fu_96_p1;
wire   [24:0] r_V_fu_100_p2;
wire   [1:0] tmp_233_fu_116_p4;
wire  signed [15:0] tmp_198_fu_132_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_pipeline_idle_pp0;
wire   [48:0] grp_fu_80_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

invCosh_1_cosh_tajbC #(
    .DataWidth( 11 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
cosh_table7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cosh_table7_address0),
    .ce0(cosh_table7_ce0),
    .q0(cosh_table7_q0)
);

tkmu_simple_hw_mukbM #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 49 ))
tkmu_simple_hw_mukbM_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_80_p0),
    .din1(grp_fu_80_p1),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
        ap_pipeline_reg_pp0_iter5_icmp_reg_157 <= icmp_reg_157;
        icmp_reg_157 <= icmp_fu_126_p2;
        tmp_232_reg_152 <= {{r_V_fu_100_p2[ap_const_lv32_18 : ap_const_lv32_A]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0)) | (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter6)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_pipeline_idle_pp0 = 1'b1;
    end else begin
        ap_pipeline_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter5))) begin
        cosh_table7_ce0 = 1'b1;
    end else begin
        cosh_table7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_0];

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((ap_pipeline_reg_pp0_iter5_icmp_reg_157[0:0] === 1'b1) ? ap_const_lv11_400 : cosh_table7_q0);

assign cosh_table7_address0 = tmp_196_fu_135_p1;

assign grp_fu_80_p0 = ap_const_lv49_1555556;

assign grp_fu_80_p1 = grp_fu_80_p10;

assign grp_fu_80_p10 = r_V_tr_fu_68_p3;

assign icmp_fu_126_p2 = ((tmp_233_fu_116_p4 != ap_const_lv2_0) ? 1'b1 : 1'b0);

assign r_V_fu_100_p2 = (ap_const_lv25_800000 - tmp_cast_cast_fu_96_p1);

assign r_V_tr_fu_68_p3 = {{tmp_fu_64_p1}, {ap_const_lv13_0}};

assign tmp_196_fu_135_p1 = $unsigned(tmp_198_fu_132_p1);

assign tmp_198_fu_132_p1 = $signed(tmp_232_reg_152);

assign tmp_231_fu_86_p4 = {{grp_fu_80_p2[ap_const_lv32_30 : ap_const_lv32_1A]}};

assign tmp_233_fu_116_p4 = {{r_V_fu_100_p2[ap_const_lv32_18 : ap_const_lv32_17]}};

assign tmp_cast_cast_fu_96_p1 = tmp_231_fu_86_p4;

assign tmp_fu_64_p1 = data_V_read[10:0];

endmodule //invCosh_1
