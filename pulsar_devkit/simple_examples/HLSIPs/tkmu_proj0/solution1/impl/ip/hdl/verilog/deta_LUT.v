// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module deta_LUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv44_222223 = 44'b1000100010001000100011;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv43_0 = 43'b0000000000000000000000000000000000000000000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv19_10000 = 19'b10000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv14_1 = 14'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv22_0 = 22'b0000000000000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv5_1B = 5'b11011;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] data_V_read;
output  [4:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire   [9:0] deta_table8_address0;
reg    deta_table8_ce0;
wire   [4:0] deta_table8_q0;
reg   [0:0] tmp_240_reg_307;
reg   [0:0] ap_pipeline_reg_pp0_iter1_tmp_240_reg_307;
reg   [0:0] ap_pipeline_reg_pp0_iter2_tmp_240_reg_307;
reg   [0:0] ap_pipeline_reg_pp0_iter3_tmp_240_reg_307;
reg   [0:0] ap_pipeline_reg_pp0_iter4_tmp_240_reg_307;
wire   [21:0] p_v_fu_152_p3;
reg   [21:0] p_v_reg_313;
wire   [18:0] tmp_243_fu_159_p1;
reg   [18:0] tmp_243_reg_318;
wire   [18:0] r_V_13_fu_178_p2;
reg   [18:0] r_V_13_reg_323;
wire   [12:0] tmp_201_fu_184_p4;
reg   [12:0] tmp_201_reg_328;
wire   [0:0] tmp_s_fu_202_p2;
reg   [0:0] tmp_s_reg_333;
wire   [13:0] ret_V_fu_208_p2;
reg   [13:0] ret_V_reg_338;
reg   [0:0] tmp_247_reg_343;
wire   [0:0] icmp_fu_260_p2;
reg   [0:0] icmp_reg_349;
wire   [63:0] tmp_199_fu_266_p1;
wire  signed [20:0] r_V_fu_88_p3;
wire   [22:0] grp_fu_100_p0;
wire   [43:0] grp_fu_100_p2;
wire   [42:0] tmp_239_fu_114_p1;
wire   [42:0] neg_mul_fu_118_p2;
wire   [17:0] tmp_241_fu_124_p4;
wire   [18:0] tmp_242_fu_138_p4;
wire  signed [21:0] tmp_fu_134_p1;
wire  signed [21:0] tmp_204_fu_148_p1;
wire   [18:0] neg_ti_fu_163_p2;
wire   [18:0] tmp_244_fu_168_p1;
wire   [18:0] tmp_205_fu_171_p3;
wire   [5:0] tmp_246_fu_198_p1;
wire  signed [13:0] ret_V_cast_fu_194_p1;
wire  signed [31:0] tmp_206_fu_221_p1;
wire  signed [31:0] tmp_207_fu_224_p1;
wire   [0:0] tmp_245_fu_214_p3;
wire   [31:0] tmp_208_fu_227_p3;
wire   [31:0] index_fu_234_p3;
wire   [21:0] tmp_248_fu_250_p4;
wire   [0:0] sel_tmp1_fu_271_p2;
wire   [0:0] sel_tmp2_fu_276_p2;
wire   [0:0] tmp_203_fu_289_p2;
wire   [4:0] sel_tmp_cast_fu_281_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_pipeline_idle_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

deta_LUT_deta_tabibs #(
    .DataWidth( 5 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
deta_table8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(deta_table8_address0),
    .ce0(deta_table8_ce0),
    .q0(deta_table8_q0)
);

tkmu_simple_hw_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 23 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 44 ))
tkmu_simple_hw_mueOg_x_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_100_p0),
    .din1(r_V_fu_88_p3),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
        ap_pipeline_reg_pp0_iter1_tmp_240_reg_307 <= tmp_240_reg_307;
        tmp_240_reg_307 <= data_V_read[ap_const_lv32_A];
    end
end

always @ (posedge ap_clk) begin
    if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
        ap_pipeline_reg_pp0_iter2_tmp_240_reg_307 <= ap_pipeline_reg_pp0_iter1_tmp_240_reg_307;
        ap_pipeline_reg_pp0_iter3_tmp_240_reg_307 <= ap_pipeline_reg_pp0_iter2_tmp_240_reg_307;
        ap_pipeline_reg_pp0_iter4_tmp_240_reg_307 <= ap_pipeline_reg_pp0_iter3_tmp_240_reg_307;
        icmp_reg_349 <= icmp_fu_260_p2;
        p_v_reg_313 <= p_v_fu_152_p3;
        r_V_13_reg_323 <= r_V_13_fu_178_p2;
        ret_V_reg_338 <= ret_V_fu_208_p2;
        tmp_201_reg_328 <= {{r_V_13_fu_178_p2[ap_const_lv32_12 : ap_const_lv32_6]}};
        tmp_247_reg_343 <= index_fu_234_p3[ap_const_lv32_1F];
        tmp_s_reg_333 <= tmp_s_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & ~(ap_pipeline_reg_pp0_iter3_tmp_240_reg_307 == 1'b0))) begin
        tmp_243_reg_318 <= tmp_243_fu_159_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0)) | (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter7)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6))) begin
        ap_pipeline_idle_pp0 = 1'b1;
    end else begin
        ap_pipeline_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter6))) begin
        deta_table8_ce0 = 1'b1;
    end else begin
        deta_table8_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_0];

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((tmp_203_fu_289_p2[0:0] === 1'b1) ? sel_tmp_cast_fu_281_p3 : deta_table8_q0);

assign deta_table8_address0 = tmp_199_fu_266_p1;

assign grp_fu_100_p0 = ap_const_lv44_222223;

assign icmp_fu_260_p2 = (($signed(tmp_248_fu_250_p4) > $signed(22'b0000000000000000000000)) ? 1'b1 : 1'b0);

assign index_fu_234_p3 = ((tmp_245_fu_214_p3[0:0] === 1'b1) ? tmp_208_fu_227_p3 : tmp_206_fu_221_p1);

assign neg_mul_fu_118_p2 = (ap_const_lv43_0 - tmp_239_fu_114_p1);

assign neg_ti_fu_163_p2 = (ap_const_lv19_0 - tmp_243_reg_318);

assign p_v_fu_152_p3 = ((ap_pipeline_reg_pp0_iter3_tmp_240_reg_307[0:0] === 1'b1) ? tmp_fu_134_p1 : tmp_204_fu_148_p1);

assign r_V_13_fu_178_p2 = (ap_const_lv19_10000 - tmp_205_fu_171_p3);

assign r_V_fu_88_p3 = {{data_V_read}, {ap_const_lv10_0}};

assign ret_V_cast_fu_194_p1 = $signed(tmp_201_fu_184_p4);

assign ret_V_fu_208_p2 = ($signed(ap_const_lv14_1) + $signed(ret_V_cast_fu_194_p1));

assign sel_tmp1_fu_271_p2 = (tmp_247_reg_343 ^ 1'b1);

assign sel_tmp2_fu_276_p2 = (icmp_reg_349 & sel_tmp1_fu_271_p2);

assign sel_tmp_cast_fu_281_p3 = ((sel_tmp2_fu_276_p2[0:0] === 1'b1) ? ap_const_lv5_0 : ap_const_lv5_1B);

assign tmp_199_fu_266_p1 = index_fu_234_p3;

assign tmp_201_fu_184_p4 = {{r_V_13_fu_178_p2[ap_const_lv32_12 : ap_const_lv32_6]}};

assign tmp_203_fu_289_p2 = (sel_tmp2_fu_276_p2 | tmp_247_reg_343);

assign tmp_204_fu_148_p1 = $signed(tmp_242_fu_138_p4);

assign tmp_205_fu_171_p3 = ((ap_pipeline_reg_pp0_iter4_tmp_240_reg_307[0:0] === 1'b1) ? neg_ti_fu_163_p2 : tmp_244_fu_168_p1);

assign tmp_206_fu_221_p1 = $signed(tmp_201_reg_328);

assign tmp_207_fu_224_p1 = $signed(ret_V_reg_338);

assign tmp_208_fu_227_p3 = ((tmp_s_reg_333[0:0] === 1'b1) ? tmp_206_fu_221_p1 : tmp_207_fu_224_p1);

assign tmp_239_fu_114_p1 = grp_fu_100_p2[42:0];

assign tmp_241_fu_124_p4 = {{neg_mul_fu_118_p2[ap_const_lv32_2A : ap_const_lv32_19]}};

assign tmp_242_fu_138_p4 = {{grp_fu_100_p2[ap_const_lv32_2B : ap_const_lv32_19]}};

assign tmp_243_fu_159_p1 = p_v_fu_152_p3[18:0];

assign tmp_244_fu_168_p1 = p_v_reg_313[18:0];

assign tmp_245_fu_214_p3 = r_V_13_reg_323[ap_const_lv32_12];

assign tmp_246_fu_198_p1 = r_V_13_fu_178_p2[5:0];

assign tmp_248_fu_250_p4 = {{index_fu_234_p3[ap_const_lv32_1F : ap_const_lv32_A]}};

assign tmp_fu_134_p1 = $signed(tmp_241_fu_124_p4);

assign tmp_s_fu_202_p2 = ((tmp_246_fu_198_p1 == ap_const_lv6_0) ? 1'b1 : 1'b0);

endmodule //deta_LUT
