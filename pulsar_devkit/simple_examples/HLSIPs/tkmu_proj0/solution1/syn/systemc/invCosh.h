// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _invCosh_HH_
#define _invCosh_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "tkmu_simple_hw_mulbW.h"
#include "invCosh_cosh_table1.h"

namespace ap_rtl {

struct invCosh : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > data_V_read;
    sc_out< sc_lv<17> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    invCosh(sc_module_name name);
    SC_HAS_PROCESS(invCosh);

    ~invCosh();

    sc_trace_file* mVcdFile;

    invCosh_cosh_table1* cosh_table1_U;
    tkmu_simple_hw_mulbW<1,5,27,25,51>* tkmu_simple_hw_mulbW_U22;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<13> > cosh_table1_address0;
    sc_signal< sc_logic > cosh_table1_ce0;
    sc_signal< sc_lv<17> > cosh_table1_q0;
    sc_signal< sc_lv<24> > tmp_234_reg_240;
    sc_signal< sc_lv<32> > index_fu_169_p3;
    sc_signal< sc_lv<32> > index_reg_245;
    sc_signal< sc_lv<1> > tmp_237_reg_250;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter6_tmp_237_reg_250;
    sc_signal< sc_lv<19> > tmp_238_reg_256;
    sc_signal< sc_lv<1> > icmp_fu_195_p2;
    sc_signal< sc_lv<1> > icmp_reg_261;
    sc_signal< sc_lv<64> > tmp_195_fu_200_p1;
    sc_signal< sc_lv<25> > r_V_tr_fu_78_p3;
    sc_signal< sc_lv<27> > grp_fu_90_p0;
    sc_signal< sc_lv<25> > grp_fu_90_p1;
    sc_signal< sc_lv<51> > grp_fu_90_p2;
    sc_signal< sc_lv<26> > tmp_fu_106_p1;
    sc_signal< sc_lv<26> > r_V_fu_109_p2;
    sc_signal< sc_lv<16> > tmp_198_fu_115_p4;
    sc_signal< sc_lv<10> > tmp_236_fu_137_p1;
    sc_signal< sc_lv<17> > ret_V_cast_fu_125_p1;
    sc_signal< sc_lv<17> > ret_V_fu_147_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_141_p2;
    sc_signal< sc_lv<32> > tmp_199_fu_153_p1;
    sc_signal< sc_lv<32> > tmp_201_fu_157_p1;
    sc_signal< sc_lv<1> > tmp_235_fu_129_p3;
    sc_signal< sc_lv<32> > tmp_202_fu_161_p3;
    sc_signal< sc_lv<1> > sel_tmp1_fu_204_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_209_p2;
    sc_signal< sc_lv<1> > tmp_200_fu_222_p2;
    sc_signal< sc_lv<17> > sel_tmp_fu_214_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_pipeline_idle_pp0;
    sc_signal< sc_lv<51> > grp_fu_90_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<51> ap_const_lv51_2AAAAAB;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_32;
    static const sc_lv<26> ap_const_lv26_800000;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<17> ap_const_lv17_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<17> ap_const_lv17_10000;
    static const sc_lv<17> ap_const_lv17_196F;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_done();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_pipeline_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_cosh_table1_address0();
    void thread_cosh_table1_ce0();
    void thread_grp_fu_90_p0();
    void thread_grp_fu_90_p1();
    void thread_grp_fu_90_p10();
    void thread_icmp_fu_195_p2();
    void thread_index_fu_169_p3();
    void thread_r_V_fu_109_p2();
    void thread_r_V_tr_fu_78_p3();
    void thread_ret_V_cast_fu_125_p1();
    void thread_ret_V_fu_147_p2();
    void thread_sel_tmp1_fu_204_p2();
    void thread_sel_tmp2_fu_209_p2();
    void thread_sel_tmp_fu_214_p3();
    void thread_tmp_195_fu_200_p1();
    void thread_tmp_198_fu_115_p4();
    void thread_tmp_199_fu_153_p1();
    void thread_tmp_200_fu_222_p2();
    void thread_tmp_201_fu_157_p1();
    void thread_tmp_202_fu_161_p3();
    void thread_tmp_235_fu_129_p3();
    void thread_tmp_236_fu_137_p1();
    void thread_tmp_fu_106_p1();
    void thread_tmp_s_fu_141_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
