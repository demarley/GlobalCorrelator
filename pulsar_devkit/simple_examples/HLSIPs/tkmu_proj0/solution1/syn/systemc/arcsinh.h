// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _arcsinh_HH_
#define _arcsinh_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "tkmu_simple_hw_mucud.h"
#include "arcsinh_arcsinh_tbkb.h"

namespace ap_rtl {

struct arcsinh : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<14> > data_V_read;
    sc_out< sc_lv<12> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    arcsinh(sc_module_name name);
    SC_HAS_PROCESS(arcsinh);

    ~arcsinh();

    sc_trace_file* mVcdFile;

    arcsinh_arcsinh_tbkb* arcsinh_table9_U;
    tkmu_simple_hw_mucud<1,7,29,27,55>* tkmu_simple_hw_mucud_U1;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_lv<13> > arcsinh_table9_address0;
    sc_signal< sc_logic > arcsinh_table9_ce0;
    sc_signal< sc_lv<12> > arcsinh_table9_q0;
    sc_signal< sc_lv<1> > tmp_reg_292;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_tmp_reg_292;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter2_tmp_reg_292;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter3_tmp_reg_292;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter4_tmp_reg_292;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter5_tmp_reg_292;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter6_tmp_reg_292;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter7_tmp_reg_292;
    sc_signal< sc_lv<25> > p_v_v_fu_136_p3;
    sc_signal< sc_lv<25> > p_v_v_reg_298;
    sc_signal< sc_lv<25> > ap_pipeline_reg_pp0_iter7_p_v_v_reg_298;
    sc_signal< sc_lv<26> > neg_ti_fu_146_p2;
    sc_signal< sc_lv<26> > neg_ti_reg_304;
    sc_signal< sc_lv<32> > index_fu_221_p3;
    sc_signal< sc_lv<32> > index_reg_309;
    sc_signal< sc_lv<1> > tmp_283_reg_314;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter9_tmp_283_reg_314;
    sc_signal< sc_lv<19> > tmp_284_reg_320;
    sc_signal< sc_lv<1> > icmp_fu_247_p2;
    sc_signal< sc_lv<1> > icmp_reg_325;
    sc_signal< sc_lv<64> > tmp_211_fu_252_p1;
    sc_signal< sc_lv<27> > r_V_fu_84_p3;
    sc_signal< sc_lv<29> > grp_fu_96_p0;
    sc_signal< sc_lv<55> > grp_fu_96_p2;
    sc_signal< sc_lv<55> > neg_mul_fu_110_p2;
    sc_signal< sc_lv<25> > tmp_279_fu_116_p4;
    sc_signal< sc_lv<25> > tmp_280_fu_126_p4;
    sc_signal< sc_lv<26> > trunc_fu_143_p1;
    sc_signal< sc_lv<26> > tmp_224_fu_152_p1;
    sc_signal< sc_lv<26> > tmp_225_fu_155_p3;
    sc_signal< sc_lv<26> > r_V_21_fu_161_p2;
    sc_signal< sc_lv<16> > tmp_213_fu_167_p4;
    sc_signal< sc_lv<10> > tmp_282_fu_189_p1;
    sc_signal< sc_lv<17> > ret_V_cast_fu_177_p1;
    sc_signal< sc_lv<17> > ret_V_fu_199_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_193_p2;
    sc_signal< sc_lv<32> > tmp_226_fu_205_p1;
    sc_signal< sc_lv<32> > tmp_227_fu_209_p1;
    sc_signal< sc_lv<1> > tmp_281_fu_181_p3;
    sc_signal< sc_lv<32> > tmp_228_fu_213_p3;
    sc_signal< sc_lv<1> > sel_tmp1_fu_256_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_261_p2;
    sc_signal< sc_lv<1> > tmp_215_fu_274_p2;
    sc_signal< sc_lv<12> > sel_tmp_fu_266_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_pipeline_idle_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<55> ap_const_lv55_AAAAAAB;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<55> ap_const_lv55_0;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_36;
    static const sc_lv<26> ap_const_lv26_0;
    static const sc_lv<26> ap_const_lv26_800000;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<17> ap_const_lv17_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_9F7;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_done();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_pipeline_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_arcsinh_table9_address0();
    void thread_arcsinh_table9_ce0();
    void thread_grp_fu_96_p0();
    void thread_icmp_fu_247_p2();
    void thread_index_fu_221_p3();
    void thread_neg_mul_fu_110_p2();
    void thread_neg_ti_fu_146_p2();
    void thread_p_v_v_fu_136_p3();
    void thread_r_V_21_fu_161_p2();
    void thread_r_V_fu_84_p3();
    void thread_ret_V_cast_fu_177_p1();
    void thread_ret_V_fu_199_p2();
    void thread_sel_tmp1_fu_256_p2();
    void thread_sel_tmp2_fu_261_p2();
    void thread_sel_tmp_fu_266_p3();
    void thread_tmp_211_fu_252_p1();
    void thread_tmp_213_fu_167_p4();
    void thread_tmp_215_fu_274_p2();
    void thread_tmp_224_fu_152_p1();
    void thread_tmp_225_fu_155_p3();
    void thread_tmp_226_fu_205_p1();
    void thread_tmp_227_fu_209_p1();
    void thread_tmp_228_fu_213_p3();
    void thread_tmp_279_fu_116_p4();
    void thread_tmp_280_fu_126_p4();
    void thread_tmp_281_fu_181_p3();
    void thread_tmp_282_fu_189_p1();
    void thread_tmp_s_fu_193_p2();
    void thread_trunc_fu_143_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
