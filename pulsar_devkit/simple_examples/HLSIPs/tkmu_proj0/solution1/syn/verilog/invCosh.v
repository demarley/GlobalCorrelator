// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module invCosh (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv51_2AAAAAB = 51'b10101010101010101010101011;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv26_800000 = 26'b100000000000000000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv17_1 = 17'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv17_10000 = 17'b10000000000000000;
parameter    ap_const_lv17_196F = 17'b1100101101111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] data_V_read;
output  [16:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire   [12:0] cosh_table1_address0;
reg    cosh_table1_ce0;
wire   [16:0] cosh_table1_q0;
reg   [23:0] tmp_234_reg_240;
wire   [31:0] index_fu_169_p3;
reg   [31:0] index_reg_245;
reg   [0:0] tmp_237_reg_250;
reg   [0:0] ap_pipeline_reg_pp0_iter6_tmp_237_reg_250;
reg   [18:0] tmp_238_reg_256;
wire   [0:0] icmp_fu_195_p2;
reg   [0:0] icmp_reg_261;
wire   [63:0] tmp_195_fu_200_p1;
wire   [24:0] r_V_tr_fu_78_p3;
wire   [26:0] grp_fu_90_p0;
wire   [24:0] grp_fu_90_p1;
wire   [50:0] grp_fu_90_p2;
wire   [25:0] tmp_fu_106_p1;
wire   [25:0] r_V_fu_109_p2;
wire   [15:0] tmp_198_fu_115_p4;
wire   [9:0] tmp_236_fu_137_p1;
wire  signed [16:0] ret_V_cast_fu_125_p1;
wire   [16:0] ret_V_fu_147_p2;
wire   [0:0] tmp_s_fu_141_p2;
wire  signed [31:0] tmp_199_fu_153_p1;
wire  signed [31:0] tmp_201_fu_157_p1;
wire   [0:0] tmp_235_fu_129_p3;
wire   [31:0] tmp_202_fu_161_p3;
wire   [0:0] sel_tmp1_fu_204_p2;
wire   [0:0] sel_tmp2_fu_209_p2;
wire   [0:0] tmp_200_fu_222_p2;
wire   [16:0] sel_tmp_fu_214_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_pipeline_idle_pp0;
wire   [50:0] grp_fu_90_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

invCosh_cosh_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
cosh_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cosh_table1_address0),
    .ce0(cosh_table1_ce0),
    .q0(cosh_table1_q0)
);

tkmu_simple_hw_mulbW #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 51 ))
tkmu_simple_hw_mulbW_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_90_p0),
    .din1(grp_fu_90_p1),
    .ce(1'b1),
    .dout(grp_fu_90_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0))) begin
        ap_pipeline_reg_pp0_iter6_tmp_237_reg_250 <= tmp_237_reg_250;
        icmp_reg_261 <= icmp_fu_195_p2;
        index_reg_245 <= index_fu_169_p3;
        tmp_234_reg_240 <= {{grp_fu_90_p2[ap_const_lv32_32 : ap_const_lv32_1B]}};
        tmp_237_reg_250 <= index_fu_169_p3[ap_const_lv32_1F];
        tmp_238_reg_256 <= {{index_fu_169_p3[ap_const_lv32_1F : ap_const_lv32_D]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0)) | (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter7)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6))) begin
        ap_pipeline_idle_pp0 = 1'b1;
    end else begin
        ap_pipeline_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter6))) begin
        cosh_table1_ce0 = 1'b1;
    end else begin
        cosh_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_0];

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((tmp_200_fu_222_p2[0:0] === 1'b1) ? sel_tmp_fu_214_p3 : cosh_table1_q0);

assign cosh_table1_address0 = tmp_195_fu_200_p1;

assign grp_fu_90_p0 = ap_const_lv51_2AAAAAB;

assign grp_fu_90_p1 = grp_fu_90_p10;

assign grp_fu_90_p10 = r_V_tr_fu_78_p3;

assign icmp_fu_195_p2 = (($signed(tmp_238_reg_256) > $signed(19'b0000000000000000000)) ? 1'b1 : 1'b0);

assign index_fu_169_p3 = ((tmp_235_fu_129_p3[0:0] === 1'b1) ? tmp_202_fu_161_p3 : tmp_199_fu_153_p1);

assign r_V_fu_109_p2 = (ap_const_lv26_800000 - tmp_fu_106_p1);

assign r_V_tr_fu_78_p3 = {{data_V_read}, {ap_const_lv13_0}};

assign ret_V_cast_fu_125_p1 = $signed(tmp_198_fu_115_p4);

assign ret_V_fu_147_p2 = ($signed(ap_const_lv17_1) + $signed(ret_V_cast_fu_125_p1));

assign sel_tmp1_fu_204_p2 = (ap_pipeline_reg_pp0_iter6_tmp_237_reg_250 ^ 1'b1);

assign sel_tmp2_fu_209_p2 = (icmp_reg_261 & sel_tmp1_fu_204_p2);

assign sel_tmp_fu_214_p3 = ((sel_tmp2_fu_209_p2[0:0] === 1'b1) ? ap_const_lv17_10000 : ap_const_lv17_196F);

assign tmp_195_fu_200_p1 = index_reg_245;

assign tmp_198_fu_115_p4 = {{r_V_fu_109_p2[ap_const_lv32_19 : ap_const_lv32_A]}};

assign tmp_199_fu_153_p1 = $signed(tmp_198_fu_115_p4);

assign tmp_200_fu_222_p2 = (sel_tmp2_fu_209_p2 | ap_pipeline_reg_pp0_iter6_tmp_237_reg_250);

assign tmp_201_fu_157_p1 = $signed(ret_V_fu_147_p2);

assign tmp_202_fu_161_p3 = ((tmp_s_fu_141_p2[0:0] === 1'b1) ? tmp_199_fu_153_p1 : tmp_201_fu_157_p1);

assign tmp_235_fu_129_p3 = r_V_fu_109_p2[ap_const_lv32_19];

assign tmp_236_fu_137_p1 = r_V_fu_109_p2[9:0];

assign tmp_fu_106_p1 = tmp_234_reg_240;

assign tmp_s_fu_141_p2 = ((tmp_236_fu_137_p1 == ap_const_lv10_0) ? 1'b1 : 1'b0);

endmodule //invCosh
